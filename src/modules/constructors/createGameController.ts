import {GameController} from "../../controllers/GameController";
import GameControllerModel from "../../database/models/GameControllerModel";

export const createGameController = async (gameController: GameController) => {
    return await GameControllerModel.create({
        id: gameController.id,
        matchNumber: gameController.matchNumber,
        tickCount: gameController.tickCount,
        state: gameController.state,
        users: gameController.users,
        queueId: gameController.queueId,
        scoreLimit: gameController.scoreLimit,
        acceptChannelGen: gameController.acceptChannelGen,
        acceptChannelId: gameController.acceptChannelId,
        matchRoleId: gameController.matchRoleId,
        acceptCountdown: gameController.acceptCountdown,
        voteChannelsGen: gameController.voteChannelsGen,
        teamAChannelId: gameController.teamAChannelId,
        teamARoleId: gameController.teamARoleId,
        teamBChannelId: gameController.teamBChannelId,
        teamBRoleId: gameController.teamBRoleId,
        voteA1MessageId: gameController.voteA1MessageId,
        voteB1MessageId: gameController.voteB1MessageId,
        voteA2MessageId: gameController.voteA2MessageId,
        voteB2MessageId: gameController.voteB2MessageId,
        voteCountdown: gameController.voteCountdown,
        votes: gameController.votes,
        mapSet: gameController.mapSet,
        sideSet: gameController.sideSet,
        currentMaxVotes: gameController.currentMaxVotes,
        map: gameController.map,
        sides: gameController.sides,
        finalChannelGen: gameController.finalChannelGen,
        finalChannelId: gameController.finalChannelId,
        scores: gameController.scores,
        scoresAccept: gameController.scoresAccept,
        scoresConfirmMessageSent: gameController.scoresConfirmMessageSent,
        processed: gameController.processed,
        abandoned: gameController.abandoned,
        abandonCountdown: gameController.abandonCountdown,
        cleanedUp: gameController.cleanedUp,
    });
}